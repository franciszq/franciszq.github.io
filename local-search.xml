<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>同时使用github和gitlab</title>
    <link href="/%E5%B7%A5%E5%85%B7/git/%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8github%E5%92%8Cgitlab/hub_lab_all_use/"/>
    <url>/%E5%B7%A5%E5%85%B7/git/%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8github%E5%92%8Cgitlab/hub_lab_all_use/</url>
    
    <content type="html"><![CDATA[<blockquote><p>工作中，一般使用公司的gitlab账号来使用gitlab，这个时候，需要用自己的github账号来使用github。</p></blockquote><span id="more"></span><h3 id="使用ssh密钥并配置"><a href="#使用ssh密钥并配置" class="headerlink" title="使用ssh密钥并配置"></a>使用ssh密钥并配置</h3><h4 id="1-生成gitlab密钥并配置"><a href="#1-生成gitlab密钥并配置" class="headerlink" title="1. 生成gitlab密钥并配置"></a>1. 生成gitlab密钥并配置</h4><ul><li><p>打开gitbash，输入命令</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;公司邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><p>按三次回车，生成id_rsa和id_rsa.pub</p></li><li><p>配置公钥id_rsa.pub到公司gitlab上</p><p><img src="F:\2-learning\my_github\blog\blog\source_posts\工具\git\同时使用github和gitlab\配置ssh_key.png"></p></li></ul><h4 id="2-生成github密钥并配置"><a href="#2-生成github密钥并配置" class="headerlink" title="2. 生成github密钥并配置"></a>2. 生成github密钥并配置</h4><ul><li><p>网上一般的命令如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-keygen -t rsa -C <span class="hljs-string">&quot;github邮箱地址&quot;</span> -f ~<span class="hljs-regexp">/.ssh/gi</span>thub_rsa<br></code></pre></td></tr></table></figure><p>但是我运行会没反应，所以这边的做法是先将原来的两个gitlab的密钥改名字，然后运行如下的， </p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;个人github邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><p>会又生成两个密钥，然后将github的密钥改成其他的，gitlab的密钥改回来，结果如下：</p><p>其中红色的gitlab的密钥，黄色的是github的密钥。</p><p><img src="F:\2-learning\my_github\blog\blog\source_posts\工具\git\同时使用github和gitlab\github_gitlab的钥匙的图片.png"></p></li><li><p>同样，配置github的公钥到个人github网站上</p></li></ul><h4 id="3-配置git，访问不同的host时，访问不同的密钥"><a href="#3-配置git，访问不同的host时，访问不同的密钥" class="headerlink" title="3. 配置git，访问不同的host时，访问不同的密钥"></a>3. 配置git，访问不同的host时，访问不同的密钥</h4><ul><li><p>进入密钥生成的位置（C:/Users/用户名/.ssh/），手动创建一个config文件（注意这个config文件要无后缀）</p></li><li><p>在新建的config文件里面配置如下内容：</p><img src="F:\2-learning\my_github\blog\blog\source\_posts\工具\git\同时使用github和gitlab\配置config文件.png" align ='left'/><p>字段的配置说明如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host<br>    Host可以看作是一个你要识别的模式，对识别的模式，配置对应的主机名和ssh文件<br>Port<br>    自定义的端口。默认为<span class="hljs-number">22</span>，可不配置<br><span class="hljs-keyword">User</span><br>    <span class="hljs-title">自定义的用户名，默认为git</span>，可不配置<br>HostName<br>    真正连接的服务器地址<br>PreferredAuthentications<br>    指定优先使用哪种方式验证，支持密码和秘钥验证方式<br>IdentityFile<br>    指定本次连接使用的密钥文件<br></code></pre></td></tr></table></figure></li></ul><h3 id="配置是否设置成功"><a href="#配置是否设置成功" class="headerlink" title="配置是否设置成功"></a>配置是否设置成功</h3><p>在C:/Users/用户名/.ssh中，右键打开Git Bash Here，分别输入命令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 测试github</span><br><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br><br><span class="hljs-comment"># 测试gitlab(@符后面的为公司gitlab地址)</span><br>ssh -T git<span class="hljs-variable">@gitlab</span>.xxx.com<br></code></pre></td></tr></table></figure><p>如果出现如下，则表示配置成功：</p><img src="F:\2-learning\my_github\blog\blog\source\_posts\工具\git\同时使用github和gitlab\配置是否成功.png" align='left'/><h3 id="git仓库配置"><a href="#git仓库配置" class="headerlink" title="git仓库配置"></a>git仓库配置</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>在git中，我们使用git config 命令用来配置git的配置文件，git配置级别主要有以下3类：</p><p>仓库级别 local 【优先级最高】</p><p>用户级别 global【优先级次之】</p><p>系统级别 system【优先级最低】</p><ul><li><p>git 仓库级别对应的配置文件是当前仓库下的.git/config 【在当前目录下.git目录默认是隐藏的，所以在文件管理器中我们要打开显示以藏文件】</p><img src="F:\2-learning\my_github\blog\blog\source\_posts\工具\git\同时使用github和gitlab\git仓库级别.png"></li><li><p>git 用户级别对应的配置文件是用户宿主目录下的~/.gitconfig 【宿主目录：C:\Users\xiaoqq】</p><img src="F:\2-learning\my_github\blog\blog\source\_posts\工具\git\同时使用github和gitlab\git用户级别.png"></li><li><p>git系统级别对应的配置文件是git安装目录下的 /etc/gitconfig</p></li></ul><blockquote><p>简单了解之后，我们就可以进行配置了</p></blockquote><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><ul><li><p>用户级别配置</p><p>用户级别是配置公司gitlba账号还是自己github账号，可以自由选择。因为平常使用公司的代码频率较高，所以我选择将gitlab账号配置成用户级别。gitBath下执行如下命令：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">git config --<span class="hljs-keyword">global</span> user.name <span class="hljs-string">&#x27;lfr&#x27;</span> <span class="hljs-meta">#公司账号名称</span><br>git config --<span class="hljs-keyword">global</span> user.email <span class="hljs-string">&#x27;lfr@company.com&#x27;</span> <span class="hljs-meta">#公司账号邮箱</span><br></code></pre></td></tr></table></figure></li><li><p>仓库级别配置</p><p>local（仓库级别）配置成github的账号。选择一个文件夹作为github的本地仓库，在该文件夹里鼠标右键打开Git Bash Here，执行如下命令</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf">git init<br>git config --<span class="hljs-built_in">local</span> user.<span class="hljs-built_in">name</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-meta">#github账号名称</span><br>git config --<span class="hljs-built_in">local</span> user.email <span class="hljs-string">&#x27;username@gmail.com&#x27;</span> <span class="hljs-meta">#github账号邮箱</span><br></code></pre></td></tr></table></figure><p>这样就可以在这个目录下，自由使用自己的github项目了。</p></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.jianshu.com/p/c9336965b958">同一台电脑同时使用gitHub和gitLab - 简书 (jianshu.com)</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>同时使用github和gitlab</title>
    <link href="/foo/"/>
    <url>/foo/</url>
    
    <content type="html"><![CDATA[<blockquote><p>工作中，一般使用公司的gitlab账号来使用gitlab，这个时候，需要用自己的github账号来使用github。</p></blockquote><span id="more"></span><h3 id="使用ssh密钥并配置"><a href="#使用ssh密钥并配置" class="headerlink" title="使用ssh密钥并配置"></a>使用ssh密钥并配置</h3><p><img src="test.png"></p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
